import streamlit as st
import pandas as pd
import re


def main():
    st.title("üìä –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞")
    st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç—Ä–∏ —Ç–∞–±–ª–∏—Ü—ã –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞")

    # –°–µ–∫—Ü–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –æ–±—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
    st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞")

    col1, col2 = st.columns(2)
    with col1:
        exposure_time = st.text_input("Exposure time", value="")
        compound = st.text_input("Compound", value="")
    with col2:
        st.write("Test/Control –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:")
        st.write("A* = Control, B*-F* = Test")

    # –í–≤–æ–¥ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö well_id
    st.subheader("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —è—á–µ–µ–∫")
    st.write("–î–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π –≥—Ä—É–ø–ø—ã (A*) –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è")

    concentrations = {}
    well_letters = ['B', 'C', 'D', 'E', 'F']

    cols = st.columns(5)
    for i, well in enumerate(well_letters):
        with cols[i]:
            concentrations[well] = st.text_input(f"–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è {well}*", value="", key=f"conc_{well}")

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ—Ö —Ç–∞–±–ª–∏—Ü
    st.header("–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü")

    uploaded_files = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç—Ä–∏ Excel —Ç–∞–±–ª–∏—Ü—ã",
        type=['xlsx', 'xls'],
        accept_multiple_files=True,
        key="main_uploader"
    )

    dfs = []
    if uploaded_files and len(uploaded_files) == 3:
        for i, uploaded_file in enumerate(uploaded_files):
            df = load_excel_file(uploaded_file, f"–¢–∞–±–ª–∏—Ü–∞ {i + 1}")
            if df is not None:
                dfs.append(df)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü
    if dfs and len(dfs) == 3:
        if st.button("–û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã"):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
                if not all([exposure_time, compound]):
                    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞")
                    return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –≥—Ä—É–ø–ø
                missing_concentrations = [well for well in well_letters if not concentrations[well]]
                if missing_concentrations:
                    st.warning(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —è—á–µ–µ–∫: {', '.join(missing_concentrations)}")
                    return

                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
                result_df = merge_tables_corrected(dfs[0], dfs[1], dfs[2], exposure_time, compound, concentrations)

                if result_df.empty:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É.")
                    return

                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
                result_df_with_headers = add_column_headers(result_df)

                st.success("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã!")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                st.header("–†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∞—è —Ç–∞–±–ª–∏—Ü–∞")
                st.dataframe(result_df_with_headers)

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫", len(result_df_with_headers))
                with col2:
                    # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–∑ –ø–æ–¥—Å—á–µ—Ç–∞ experiment_id (–ø–µ—Ä–≤—ã–µ 4 —Å—Ç—Ä–æ–∫–∏)
                    data_rows = result_df_with_headers.iloc[
                                4:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 4 —Å—Ç—Ä–æ–∫–∏ (1 –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ + 3 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö)
                    st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ experiment_id", data_rows['experiment_id'].nunique())
                with col3:
                    st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ well_id", data_rows['well_id'].nunique())

                st.write(f"Well_id –≤ –¥–∞–Ω–Ω—ã—Ö: {sorted(data_rows['well_id'].unique())[:10]}...")

                # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                csv = result_df_with_headers.to_csv(index=False, encoding='utf-8-sig')
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –∫–∞–∫ CSV",
                    data=csv,
                    file_name="merged_experiment_data.csv",
                    mime="text/csv"
                )

            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
                st.exception(e)


def load_excel_file(uploaded_file, table_name):
    """–ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–∞"""
    try:
        df = pd.read_excel(uploaded_file, header=None)
        st.write(f"**{table_name}:** {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤, {df.shape[0]} —Å—Ç—Ä–æ–∫")
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {table_name}: {e}")
        return None


def parse_time_interval(time_str):
    """–ü–∞—Ä—Å–∏—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö"""
    try:
        if isinstance(time_str, str):
            times = re.findall(r'(\d+):(\d+):(\d+)', time_str)
            if len(times) >= 2:
                start_h, start_m, start_s = map(int, times[0])
                end_h, end_m, end_s = map(int, times[1])
                start_total_minutes = start_h * 60 + start_m + start_s / 60
                end_total_minutes = end_h * 60 + end_m + end_s / 60
                return (start_total_minutes + end_total_minutes) / 2
        return 0
    except:
        return 0


def calculate_light_status(time_minutes):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–≤–µ—Ç–∞ - –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å Off"""
    cycle_position = time_minutes % 20
    return "Off" if cycle_position < 10 else "On"


def extract_well_letter(well_id):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –±—É–∫–≤—É –∏–∑ well_id (A3 -> A, B4 -> B)"""
    try:
        well_str = str(well_id).strip()
        match = re.search(r'^([A-Za-z])', well_str)
        if match:
            return match.group(1).upper()
        return ""
    except:
        return ""


def get_test_control(well_id):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç Test/Control –ø–æ well_id"""
    well_letter = extract_well_letter(well_id)
    return "Control" if well_letter == 'A' else "Test"


def get_concentration_for_well(well_id, concentrations):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ well_id"""
    well_letter = extract_well_letter(well_id)
    if well_letter == 'A':
        return ""
    else:
        return concentrations.get(well_letter, "")


def find_data_rows(df):
    """–ù–∞—Ö–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
    data_rows = []
    for idx, row in df.iterrows():
        try:
            col1_value = str(row.iloc[1]).strip() if pd.notna(row.iloc[1]) else ""
            if re.match(r'^[A-Fa-f]\d+', col1_value):
                data_rows.append(idx)
        except:
            continue
    return data_rows


def extract_data_with_index(df, table_type):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è"""
    data = []
    data_row_indices = find_data_rows(df)

    st.write(f"–ù–∞–π–¥–µ–Ω–æ {len(data_row_indices)} —Å—Ç—Ä–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏")

    for idx in data_row_indices:
        row = df.iloc[idx]
        try:
            experiment_id = str(row.iloc[0]).strip() if pd.notna(row.iloc[0]) else ""
            well_id = str(row.iloc[1]).strip() if pd.notna(row.iloc[1]) else ""
            time_str = str(row.iloc[2]).strip() if len(row) > 2 and pd.notna(row.iloc[2]) else ""

            if not experiment_id or not well_id:
                continue

            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
            merge_key = f"{experiment_id}_{well_id}_{idx}"

            if table_type == 1:
                record = {
                    'merge_key': merge_key,
                    'experiment_id': experiment_id,
                    'well_id': well_id,
                    'time': time_str,
                    'distance_moved': safe_float(row.iloc[3]),
                    'velocity': safe_float(row.iloc[4]),
                    'movement1': safe_float(row.iloc[5]),
                    'movement2': safe_float(row.iloc[6])
                }
            elif table_type == 2:
                record = {
                    'merge_key': merge_key,
                    'experiment_id': experiment_id,
                    'well_id': well_id,
                    'heading': safe_float(row.iloc[3]),
                    'turn_angle': safe_float(row.iloc[4]),
                    'angular_velocity': safe_float(row.iloc[5]),
                    'meander1': safe_float(row.iloc[6]),
                    'meander2': safe_float(row.iloc[7])
                }
            else:  # table_type == 3
                record = {
                    'merge_key': merge_key,
                    'experiment_id': experiment_id,
                    'well_id': well_id,
                    'cw_rotation': safe_float(row.iloc[3]),
                    'ccw_rotation': safe_float(row.iloc[4])
                }

            data.append(record)

        except Exception as e:
            continue

    return pd.DataFrame(data)


def safe_float(value):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float"""
    try:
        if pd.isna(value) or value == '' or str(value).strip() == '':
            return None
        value_str = str(value).replace(',', '.')
        return float(value_str)
    except:
        return None


def merge_tables_corrected(df1, df2, df3, exposure_time, compound, concentrations):
    """
    –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º merge_key
    """
    st.info("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü...")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å merge_key
    data1 = extract_data_with_index(df1, 1)
    data2 = extract_data_with_index(df2, 2)
    data3 = extract_data_with_index(df3, 3)

    st.write(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ —Å—Ç—Ä–æ–∫: –¢–∞–±–ª–∏—Ü–∞ 1 - {len(data1)}, –¢–∞–±–ª–∏—Ü–∞ 2 - {len(data2)}, –¢–∞–±–ª–∏—Ü–∞ 3 - {len(data3)}")

    if len(data1) == 0 or len(data2) == 0 or len(data3) == 0:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–¥–Ω–æ–π –∏–∑ —Ç–∞–±–ª–∏—Ü")
        return pd.DataFrame()

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–æ merge_key
    try:
        merged = data1.merge(data2, on='merge_key', how='inner', suffixes=('', '_y'))
        merged = merged.merge(data3, on='merge_key', how='inner', suffixes=('', '_z'))

        st.write(f"–ü–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ merge_key: {len(merged)} —Å—Ç—Ä–æ–∫")

        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å—Ç–æ–ª–±—Ü—ã
        columns_to_drop = [col for col in merged.columns if col.endswith('_y') or col.endswith('_z')]
        merged = merged.drop(columns=columns_to_drop)

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        return pd.DataFrame()

    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    result_data = []

    for _, row in merged.iterrows():
        time_minutes = parse_time_interval(row['time'])
        light_status = calculate_light_status(time_minutes)
        test_control = get_test_control(row['well_id'])
        concentration = get_concentration_for_well(row['well_id'], concentrations)

        result_row = {
            'experiment_id': row['experiment_id'],
            'exposure_time': exposure_time,
            'well_id': row['well_id'],
            'Test/Control': test_control,
            'Compound': compound if test_control == "Test" else "",
            'Concentration': concentration,
            'Time': row['time'],
            'Light': light_status,
            'Distance moved': row['distance_moved'],
            'Velocity': row['velocity'],
            'Movement': row['movement1'],
            'Movement_2': row['movement2'],
            'Heading': row['heading'],
            'Turn angle': row['turn_angle'],
            'Angular velocity': row['angular_velocity'],
            'Meander': row['meander1'],
            'Meander_2': row['meander2'],
            'CW Rotation': row['cw_rotation'],
            'CCW Rotation': row['ccw_rotation']
        }

        result_data.append(result_row)

    result_df = pd.DataFrame(result_data)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
    if len(result_df) != len(data1):
        st.warning(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: –±—ã–ª–æ {len(data1)}, —Å—Ç–∞–ª–æ {len(result_df)}")

    return result_df


def add_column_headers(result_df):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ç—Ä–∏ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –ú–ï–ñ–î–£ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    # –°–æ–∑–¥–∞–µ–º DataFrame —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    column_names = [
        'experiment_id', 'exposure_time', 'well_id', 'Test/Control', 'Compound',
        'Concentration', 'Time', 'Light', 'Distance moved', 'Velocity',
        'Movement', 'Movement_2', 'Heading', 'Turn angle', 'Angular velocity',
        'Meander', 'Meander_2', 'CW Rotation', 'CCW Rotation'
    ]

    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    main_header_row = pd.DataFrame([column_names], columns=column_names)

    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ)
    header_row1 = {col: "" for col in column_names}
    header_row1['Distance moved'] = "Center-point"
    header_row1['Velocity'] = "Center-point"
    header_row1['Movement'] = "Moving / Center-point"
    header_row1['Movement_2'] = "Not Moving / Center-point"
    header_row1['Heading'] = "Center-point"
    header_row1['Turn angle'] = "Center-point / relative"
    header_row1['Angular velocity'] = "Center-point / relative"
    header_row1['Meander'] = "Center-point / relative"
    header_row1['Meander_2'] = "Center-point / relative"
    header_row1['CW Rotation'] = "Center-point / Clockwise"
    header_row1['CCW Rotation'] = "Center-point / Counter clockwise"

    # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (—Ç—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ)
    header_row2 = {col: "" for col in column_names}
    header_row2['Distance moved'] = "Total"
    header_row2['Velocity'] = "Mean"
    header_row2['Movement'] = "Cumulative Duration"
    header_row2['Movement_2'] = "Cumulative Duration"
    header_row2['Heading'] = "Mean"
    header_row2['Turn angle'] = "Mean"
    header_row2['Angular velocity'] = "Mean"
    header_row2['Meander'] = "Mean"
    header_row2['Meander_2'] = "Total"
    header_row2['CW Rotation'] = "Frequency"
    header_row2['CCW Rotation'] = "Frequency"

    # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (—á–µ—Ç–≤–µ—Ä—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ)
    header_row3 = {col: "" for col in column_names}
    header_row3['Distance moved'] = "mm"
    header_row3['Velocity'] = "mm/s"
    header_row3['Movement'] = "s"
    header_row3['Movement_2'] = "s"
    header_row3['Heading'] = "deg"
    header_row3['Turn angle'] = "deg"
    header_row3['Angular velocity'] = "deg/s"
    header_row3['Meander'] = "deg/mm"
    header_row3['Meander_2'] = "deg/mm"
    # CW Rotation –∏ CCW Rotation –æ—Å—Ç–∞—é—Ç—Å—è –ø—É—Å—Ç—ã–º–∏ –≤ —Ç—Ä–µ—Ç—å–µ–π —Å—Ç—Ä–æ–∫–µ

    # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Ç—Ä–µ–º—è —Å—Ç—Ä–æ–∫–∞–º–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    additional_headers_df = pd.DataFrame([header_row1, header_row2, header_row3])

    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π DataFrame –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ:
    # 1. –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    # 2. –¢—Ä–∏ —Å—Ç—Ä–æ–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    # 3. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ result_df
    final_df = pd.concat([main_header_row, additional_headers_df, result_df], ignore_index=True)

    return final_df


if __name__ == "__main__":
    main()
